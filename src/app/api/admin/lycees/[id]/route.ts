import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/db";

// Middleware d'authentification simplifi√©
function authenticate(request: NextRequest): boolean {
  // Dans un environnement r√©el, on v√©rifierait le token JWT
  const authHeader = request.headers.get("authorization");
  return !!(authHeader && authHeader.startsWith("Bearer "));
}

// Interface pour le contexte des param√®tres
interface RouteContext {
  params: Promise<{
    id: string;
  }>;
}

// PUT /api/admin/lycees/[id] - Mettre √† jour un lyc√©e
export async function PUT(request: NextRequest, context: RouteContext) {
  try {
    console.log("üîÑ PUT /api/admin/lycees/[id] - Mise √† jour d'un lyc√©e...");

    if (!authenticate(request)) {
      console.log("‚ùå √âchec d'authentification");
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    const { id } = await context.params;
    const body = await request.json();
    const { nom, adresse, type, description, logo, actif } = body;

    console.log("üìù Donn√©es re√ßues pour mise √† jour:", {
      id,
      nom,
      adresse,
      type,
      actif,
      hasDescription: !!description,
      hasLogo: !!logo,
    });

    // Validation
    if (!nom || !adresse || !type) {
      console.log("‚ùå Validation √©chou√©e: champs manquants");
      return NextResponse.json(
        { error: "Nom, adresse et type sont requis" },
        { status: 400 }
      );
    }

    if (!["PUBLIC", "PRIVE"].includes(type)) {
      console.log("‚ùå Validation √©chou√©e: type invalide");
      return NextResponse.json(
        { error: "Type doit √™tre PUBLIC ou PRIVE" },
        { status: 400 }
      );
    }

    // V√©rifier si le lyc√©e existe
    const existingLycee = await db.lycee.findUnique({
      where: { id },
    });

    if (!existingLycee) {
      console.log(`‚ùå Lyc√©e non trouv√©: ${id}`);
      return NextResponse.json({ error: "Lyc√©e non trouv√©" }, { status: 404 });
    }

    console.log(`üìù Lyc√©e trouv√©: ${existingLycee.nom}`);

    // Mise √† jour du lyc√©e
    const updatedLycee = await db.lycee.update({
      where: { id },
      data: {
        nom,
        adresse,
        type,
        description: description || null,
        logo: logo || null,
        ...(typeof actif === "boolean" ? { actif } : {}),
      },
    });

    console.log(
      `‚úÖ Lyc√©e mis √† jour: ${nom} (ID: ${id}) - ${new Date().toISOString()}`
    );

    return NextResponse.json({
      success: true,
      data: updatedLycee,
      message: "Lyc√©e mis √† jour avec succ√®s",
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du lyc√©e:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}

// DELETE /api/admin/lycees/[id] - Supprimer un lyc√©e
export async function DELETE(request: NextRequest, context: RouteContext) {
  try {
    console.log("üîÑ DELETE /api/admin/lycees/[id] - Suppression d'un lyc√©e...");

    if (!authenticate(request)) {
      console.log("‚ùå √âchec d'authentification");
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    const { id } = await context.params;

    console.log(`üìù Demande de suppression pour le lyc√©e: ${id}`);

    // V√©rifier si le lyc√©e existe
    const existingLycee = await db.lycee.findUnique({
      where: { id },
    });

    if (!existingLycee) {
      console.log(`‚ùå Lyc√©e non trouv√©: ${id}`);
      return NextResponse.json({ error: "Lyc√©e non trouv√©" }, { status: 404 });
    }

    console.log(`üìù Lyc√©e trouv√© pour suppression: ${existingLycee.nom}`);

    // Suppression du lyc√©e
    await db.lycee.delete({
      where: { id },
    });

    console.log(
      `‚úÖ Lyc√©e supprim√©: ${
        existingLycee.nom
      } (ID: ${id}) - ${new Date().toISOString()}`
    );

    return NextResponse.json({
      success: true,
      message: "Lyc√©e supprim√© avec succ√®s",
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du lyc√©e:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}
